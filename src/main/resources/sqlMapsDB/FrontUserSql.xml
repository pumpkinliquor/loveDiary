<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="FrontUserDAO">

	<!-- 회원정보 조회 -->
	<select id="selectUserInfo" parameterType="userMemberEntity" resultType="HashMap">
		/* FrontUserDAO.selectUserInfo*/
		select
			a.mem_userid
			,a.mem_email
			,a.mem_password
			,a.mem_nickname
			,a.mem_class
			,a.mem_sub_id
			,a.mem_phone
			,a.mem_icon
			,a.mem_level
			,b.saf_path
			,b.saf_file
			,b.saf_seq
			,c.cm_code
			,c.cm_name
			,d.sub_name
		from cb_member a
		left join plus_site_attach_file b
		on a.mem_icon = b.seq
			and b.saf_bbs = #{safBbs}
		left join plus_code_master c
		on a.mem_class = c.cm_code
		left join cb_aigo_subject d
		on a.mem_sub_id = d.sub_id
		where 1=1
		<if test="memId != null and memId != ''">
			and a.mem_id = #{memId}
		</if>
		<if test="memUserid != null and memUserid != ''">
			and a.mem_userid = #{memUserid}
		</if>
		<if test="memEmail != null and memEmail != ''">
			and a.mem_email = #{memEmail}
		</if>
		order by b.saf_seq desc
		limit 1
	</select>

	<!-- 파일 SEQ 최대값 조회 -->
	<select id="selectFileSeq" resultType="Integer">
		/* FrontUserDAO.selectFileSeq */
		select
			max(seq) + 1
		from
			plus_site_attach_file
	</select>

	<!-- plus_site_attach_file 테이블의 seq값 저장 -->
	<update id="updateIcon" parameterType="userMemberEntity">
		/* FrontUserDAO.updateIcon */
		update cb_member
		set
			mem_icon = #{memIcon}
		where
			mem_userid = #{memUserid}
	</update>

	<!-- plus_site_attach_file 테이블의 seq값 저장 -->
	<update id="updateUserInfo" parameterType="userMemberEntity">
		/* FrontUserDAO.updateUserInfo */
		update cb_member
		set
			mem_temp_id = mem_temp_id
		<if test="memNickname != null and memNickname != ''">
			,mem_nickname = #{memNickname}
		</if>
		<if test="memPhone != null and memPhone != ''">
			,mem_phone = #{memPhone}
		</if>
		<if test="memClass != null and memClass != ''">
			,mem_class = #{memClass}
		</if>
		<if test="memSubId != null and memSubId != ''">
			,mem_sub_id = #{memSubId}
		</if>
		where
			mem_userid = #{memUserid}
	</update>

	<!-- 휴대폰번호 인증 > 인증코드 insert -->
	<insert id="insertSmsAuthCode" parameterType="HashMap" useGeneratedKeys="true" keyProperty="masId" keyColumn="mas_id">
		/* Login.insertAuthCode */
		insert into cb_member_auth_sms
		(
			mem_id
			, mas_key
			, mas_type
			, mas_generate_datetime
			, mas_used
			, mas_expired
			, mas_expire_datatime
		) values (
			#{memId}
			, #{masKey}
			, #{masType}
			, now()
			, 'N'
			, 'N'
			, date_add(now(), interval 3 minute)
		)
	</insert>

	<!-- 휴대폰번호 인증 > 유효한 인증번호인지 체크 -->
	<select id="selectSmsAuthCode" parameterType="HashMap" resultType="HashMap">
		/* FrontUserDAO.selectSmsAuthCode */
		select
			m.mem_id as memId
			, mas.mas_id as masId
			, m.mem_userid as memUserid
		from
			cb_member as m, cb_member_auth_sms as mas
		where
			m.mem_id = mas.mem_id
			and mas.mas_expire_datatime > now()
			and mas.mas_used = 'N'
			and m.mem_userid = #{memUserid}
			and mas.mas_key = #{masKey}
	</select>

	<!-- 휴대폰번호 인증 > 인증번호 사용 처리 -->
	<update id="updateSmsAuthCode" parameterType="HashMap">
		/* FrontUserDAO.updateSmsAuthCode */
		update cb_member_auth_sms
		set
			mas_used = 'Y'
			, mas_use_datetime = now()
		where
			mas_expired = 'N'
			and mem_id = #{memId}
			and mas_key = #{masKey}
	</update>

	<!-- 휴대폰번호 인증 > 인증 성공 시 해당 회원의 모든 인증번호 만료처리 -->
	<update id="updateUnusedSmsAuthCode" parameterType="HashMap">
		/* FrontUserDAO.updateUnusedSmsAuthCode */
		update cb_member_auth_sms
		set
			mas_expired = 'Y'
			, mas_expire_datatime = now()
		where
			mem_id = #{memId}
	</update>

	<!-- 학년 목록 조회 -->
	<select id="selectLevelCode" parameterType="HashMap" resultType="HashMap">
		/* FrontUserDAO.selectLevelCode */
		select
			cm_gubun
			, cm_code
			, cm_name
		from
			plus_code_master
		where
			cm_gubun = 'temp_class'
			and cm_is_use = 'y';
	</select>

	<!-- 과목 목록 조회 -->
	<select id="selectSubCode" parameterType="HashMap" resultType="HashMap">
		/* FrontUserDAO.selectSubCode */
		select
			sub_id
			, sub_name
		from
			cb_aigo_subject
		where
			use_yn ='y'
			and user_active = 'y'
	</select>

	<!-- 회원정보에 사전진단 아이디 값 업데이트 -->
	<update id="updateUserInfoTempId" parameterType="userMemberEntity">
		/* FrontUserDAO.updateUserInfoTempId */
		update cb_member
		set
			mem_temp_id = #{memTempId}
		where
			mem_id = #{memId}
	</update>

	<!-- 설정 정보 조회 -->
	<select id="selectSettingInfo" parameterType="userMemberEntity" resultType="HashMap">
		/* FrontUserDAO.selectSettingInfo */
		select
			aigo_alarm_mkt
			,aigo_alarm_learn
			,aigo_alarm_night
			,aigo_alarm_date
		from
			cb_member
		where
			mem_userid = #{memUserid}
	</select>

	<!-- 설정 정보 저장 -->
	<update id="updateSettingInfo" parameterType="userMemberEntity">
		/* FrontUserDAO.updateSettingInfo */
		update cb_member
		set
			aigo_alarm_date = sysdate()
			<if test="aigoAlarmMkt != null and aigoAlarmMkt != ''">
			,aigo_alarm_mkt = #{aigoAlarmMkt}
			</if>
			<if test="aigoAlarmLearn != null and aigoAlarmLearn != ''">
			,aigo_alarm_learn = #{aigoAlarmLearn}
			</if>
			<if test="aigoAlarmNight != null and aigoAlarmNight != ''">
			,aigo_alarm_night = #{aigoAlarmNight}
			</if>
		where
			mem_userid = #{memUserid}
	</update>

	<!-- 설정 정보 변경 내역 저장 -->
	<insert id="insertSettingLog" parameterType="userMemberEntity">
		/* FrontUserDAO.insertSettingLog */
		insert into cb_member_alarm_log
		(
			mem_id
			,aigo_alarm_mkt
			,aigo_alarm_learn
			,aigo_alarm_night
			,aigo_alarm_date
		)
		select
			mem_id
			, ifnull(#{aigoAlarmMkt}, aigo_alarm_mkt)
			, ifnull(#{aigoAlarmLearn}, aigo_alarm_learn)
			, ifnull(#{aigoAlarmNight}, aigo_alarm_night)
			, sysdate()
		from cb_member
		where
		mem_id = #{memId}
	</insert>
	
	<!-- 사용자 레벨 update -->
	<update id="updateUserLevel" parameterType="userMemberEntity">
		/* FrontUserDAO.updateUserLevel */
		update cb_member
		set
			udt_sysdate = now()
		<if test="memLevel != null and memLevel != ''">
			, mem_level = #{memLevel}
		</if>
		where
			mem_id = #{memId}
	</update>
	
	<!-- 설정 정보 변경 내역 저장 -->
	<insert id="insertUserLevelHistory" parameterType="userLevelHistoryEntity">
		/* FrontUserDAO.insertUserLevelHistory */
		insert into cb_member_level_history
		(
			mem_id
			,mlh_from
			,mlh_to
			,mlh_datetime
			,mlh_reason
			,mlh_ip
			,reg_sysdate
		) values (
			#{memId}
			,#{mlhFrom}
			,#{mlhTo}
			,now()
			,#{mlhReason}
			,#{mlhIp}
			,now()
		)
	</insert>
	
	<!-- 전체 유저의 성취도 데이터 조회 -->
	<select id="selectTotalUserAchieveRateRankList" parameterType="hashMap" resultType="hashMap">
		/* FrontUserDAO.selectTotalUserAchieveRateRankList */
		SELECT
			member.mem_id
			, ifnull(achieve.achieve_rate, 0.00) AS achieve_rate
		FROM
		(
			SELECT
				mem.mem_id
			FROM cb_member AS mem
			WHERE mem.mem_id <![CDATA[>]]> 0
				AND mem.mem_is_admin = 0
		) AS member
		LEFT OUTER JOIN (
			SELECT
				user_achieve.*
			FROM(
				SELECT
					wp.mem_id
					, round(wp.total_pass_per * ifnull(lw.weight_learn_day, 0) * ifnull(pw.weight_pass_per, 0), 2) AS achieve_rate
				FROM (
					SELECT
						mem_id
						, round(SUM(pass_cnt_weight)/SUM(total_qst_cnt)*100, 2) AS total_pass_per
					FROM
					(
						SELECT
							mem_id
							, ans_set_weight.unit_id
							, au.weight_value
							, total_qst_cnt
							, pass_cnt
							, round(pass_cnt*weight_value) AS pass_cnt_weight
						FROM (	
							SELECT
								ans_info.mem_id
								, ans_info.unit_id
								, COUNT(ans_info.qst_id) AS total_qst_cnt
								, SUM(ans_info.pass_cnt) AS pass_cnt
							FROM (	
								select
									amal.mem_id
									, aq.unit_id
									, amal.qst_id
									, amal.ans_value
									, case when amal.pass_yn = 'y' then 1 ELSE 0 END AS pass_cnt
								from cb_aigo_my_answer_list as amal
								INNER JOIN (
									select
										max(ans.ans_id) as ans_id
										, ans.qst_id
										, ans.mem_id
									from cb_aigo_my_answer_list as ans
									group by ans.qst_id, ans.qst_id, ans.mem_id
								) AS ah
									ON amal.ans_id = ah.ans_id
								INNER JOIN cb_aigo_question AS aq
									ON amal.qst_id = aq.qst_id
								INNER JOIN cb_member AS cm
									on amal.mem_id = cm.mem_id
									AND cm.mem_is_admin = 0
							) AS ans_info
							WHERE ans_info.mem_id <![CDATA[>]]> 0
							GROUP BY ans_info.mem_id, ans_info.unit_id
						) AS ans_set_weight
						INNER JOIN cb_aigo_unit AS au
							ON ans_set_weight.unit_id = au.unit_id
					) AS total_pass_per_weight
					GROUP BY total_pass_per_weight.mem_id
				) AS wp
				LEFT JOIN (
					SELECT
						mem_id
						, last_learn_day
						, case
							when last_learn_day <![CDATA[<=]]> 1 then 1.2
							when last_learn_day <![CDATA[>]]> 1 and last_learn_day <![CDATA[<=]]> 7 then 1.1
							when last_learn_day <![CDATA[>]]> 7 and last_learn_day <![CDATA[<=]]> 15 then 0.9
							when last_learn_day <![CDATA[>]]> 15 then 0.7
					 	  END AS weight_learn_day
					FROM 
					(
						SELECT
							learn_date.mem_id
							, learn_date.reg_date
							, DATEDIFF(NOW(), learn_date.reg_date) AS last_learn_day
						FROM (
							SELECT
								learn.mem_id
								, max(ans_date.reg_date) AS reg_date
							FROM (
								SELECT
									min(ans.ans_id) as ans_id
									, ans.qst_id
									, ans.mem_id
								from cb_aigo_my_answer_list as ans
								GROUP by ans.qst_id, ans.mem_id
							) AS learn
							INNER JOIN cb_aigo_my_answer_list AS ans_date
								ON learn.ans_id = ans_date.ans_id
							INNER JOIN cb_member AS cm
								on learn.mem_id = cm.mem_id
								AND cm.mem_is_admin = 0
							GROUP BY learn.mem_id
						)AS learn_date
					) AS learn_day_weight
				) AS lw
					ON wp.mem_id = lw.mem_id
				LEFT JOIN (
					SELECT
						mem_id
						, latest_pass_per
						, case
							when latest_pass_per <![CDATA[>=]]> 90 then 2.0
							when latest_pass_per <![CDATA[>=]]> 80 AND latest_pass_per <![CDATA[<]]> 90 then 1.5 
							when latest_pass_per <![CDATA[>=]]> 70 AND latest_pass_per <![CDATA[<]]> 80 then 1.2 
							when latest_pass_per <![CDATA[<]]> 70 then 1.0 ELSE 1.0 END AS weight_pass_per
					FROM
					(
						SELECT 
							mem_id, SUM(pass_cnt)/COUNT(qst_id)*100 AS latest_pass_per
						FROM 
						(
							SELECT
								latest_qst.mem_id
								, latest_qst.qst_id
								, latest_qst.rank_num
								, latest_qst.pass_cnt
							FROM
								(
								SELECT
									leran_rank_qst.*
									, (CASE @target WHEN leran_rank_qst.mem_id THEN @rownum:=@rownum+1 ELSE @rownum:=1 END) AS rank_num
								 	, (@target:=leran_rank_qst.mem_id) as target
								FROM 
								(
									SELECT
										learn.mem_id
										, learn.qst_id
										, learn.pass_cnt
										, ans_date.reg_date
									FROM (
										SELECT
											min(ans.ans_id) as ans_id
											, ans.qst_id
											, ans.mem_id
											, case when pass_yn = 'y' then 1 ELSE 0 END AS pass_cnt
										from cb_aigo_my_answer_list as ans
										GROUP by ans.qst_id, ans.mem_id
									) AS learn
									INNER JOIN cb_aigo_my_answer_list AS ans_date
										ON learn.ans_id = ans_date.ans_id
									INNER JOIN cb_member AS cm
										on learn.mem_id = cm.mem_id
										AND cm.mem_is_admin = 0
									ORDER BY learn.mem_id ASC, ans_date.reg_date desc
								) AS leran_rank_qst, (SELECT @target:='', @rownum:=0 FROM DUAL) AS r
							) AS latest_qst
							WHERE latest_qst.rank_num <![CDATA[<=]]> 10
						) AS latest_pass_per
						GROUP BY latest_pass_per.mem_id
					) AS pass_per_weight
				) AS pw
					on wp.mem_id = pw.mem_id
			) AS user_achieve
		) AS achieve
			ON member.mem_id = achieve.mem_id
		ORDER BY achieve_rate desc
	</select>
	
	<!-- 회원탈퇴 > 회원 학습정보 Summary -->
	<select id="selectUserLearnSummary" parameterType="hashMap" resultType="camelMap">
		/* FrontUserDAO.selectUserLearnSummary */
		select
			(select reg_sysdate from cb_member where mem_id = #{memId}) as start_date
			,ifnull((select s_cnt+f_cnt from cb_aigo_my_answer_info where mem_id = #{memId}), 0) as qst_cnt
			,(select
				count(*)
			from cb_aigo_learn_history as alh
			where mem_id = #{memId}
				and thi_test_type in('weekly','level'))  as report_cnt
	</select>
	
</mapper>